---
- name: Provision the EC2 Server
# ==============================
  hosts: localhost
  connection: local
  gather_facts: yes

  vars:
    regions:
      "1": "ap-northeast-1"
      "2": "ap-south-1"
      "3": "ap-southeast-1"
      "4": "ap-southeast-2"
      "5": "eu-west-1"
      "6": "eu-central-1"
      "7": "sa-east-1"
      "8": "us-east-1"
      "9": "us-west-1"
      "10": "us-west-2"

  # This variable file is included so the ec2-security-group role knows
  # which port to open for SSH
  vars_files:
    - roles/ssh/defaults/main.yml

  vars_prompt:
    - name: "aws_region_var"
      prompt: |
        In what region should the server be located?
          1. Asia Pacific     (Tokyo)
          2. Asia Pacific     (Mumbai)
          3. Asia Pacific     (Singapore)
          4. Asia Pacific     (Sydney)
          5. EU               (Ireland)
          6. EU               (Germany)
          7. South America    (Sao Paulo)
          8. US East          (Northern Virginia)
          9. US West          (Northern California)
          10. US West         (Oregon)
        Please choose the number of your region. Press enter for default (#3) region.
      default: "3"
      private: no

    - name: "aws_vpc_id_var"
      prompt: |

        In which VPC would you like to create the server and security group
        (e.g. vpc-89d740ee)?

        Press enter to use the default VPC.
      private: no

    - name: "aws_vpc_subnet_id_var"
      prompt: |

        From which subnet should the server receive an address (e.g. subnet-78d9a232)?

        Press enter to use the default subnet.
      private: no

    - name: "aws_instance_name_var"
      prompt: "\nWhat should the server be named? Press enter for default (streisand).\n"
      default: "streisand"
      private: no

    - name: "aws_access_key_var"
      prompt: "\n\nThe following information can be found in the IAM Management Console.\nhttps://console.aws.amazon.com/iam/home?#security_credential\n\nWhat is your AWS Access Key ID?\n"
      private: no

    - name: "aws_secret_key_var"
      prompt: "\nWhat is your AWS Secret Access Key?\n"
      private: no

    - name: "confirmation"
      prompt: "\nStreisand will now set up your server. This process usually takes around ten minutes. Press Enter to begin setup...\n"

  # Facts persist across plays, and these facts will be used in the
  # final step to make an API call to open all of the necessary ports in
  # the EC2 security group. This is necessary because Tor chooses random
  # ports for the obfsproxy pluggable transport and therefore they cannot
  # be opened in advance before Tor is up and running.
  pre_tasks:
    - name: Set the AWS Region fact
      set_fact:
        aws_region: "{{ regions[aws_region_var] }}"

    - name: Set the AWS VPC ID fact
      set_fact:
        aws_vpc_id: "{{ aws_vpc_id_var }}"
      when: aws_vpc_id_var != ""

    - name: Set the AWS VPC Subnet ID fact
      set_fact:
        aws_vpc_subnet_id: "{{ aws_vpc_subnet_id_var }}"
      when: aws_vpc_subnet_id_var != ""

    - name: Set the AWS Instance Name fact
      set_fact:
        aws_instance_name: "{{ aws_instance_name_var }}"

    - name: Set the AWS Access Key fact
      set_fact:
        aws_access_key: "{{ aws_access_key_var }}"

    - name: Set the AWS Secret Key fact
      set_fact:
        aws_secret_key: "{{ aws_secret_key_var }}"

  roles:
    - genesis-amazon


- name: Configure the Server and install required software
# ========================================================
  hosts: streisand-host

  # The standard streisand.yml is not included because the Ubuntu AMI
  # uses 'ubuntu' instead of 'root'
  remote_user: ubuntu
  become: yes

  roles:
    - common
    # OpenConnect must be set up before L2TP/IPsec in order to avoid
    # compilation issues.
    - openconnect
    - l2tp-ipsec
    - openvpn
    - stunnel
    - shadowsocks
    - ssh
    - tinyproxy
    - tor-bridge
    - sslh
    - monit
    - ufw
    - streisand-mirror
    - streisand-gateway


- name: Open all service ports
# ============================
  hosts: localhost
  connection: local
  gather_facts: no

  # These variable files are included so the ec2-security-group role
  # knows which ports to open
  vars_files:
    - roles/l2tp-ipsec/defaults/main.yml
    - roles/openconnect/defaults/main.yml
    - roles/openvpn/defaults/main.yml
    - roles/shadowsocks/defaults/main.yml
    - roles/ssh/defaults/main.yml
    - roles/streisand-gateway/defaults/main.yml
    - roles/stunnel/defaults/main.yml
    - roles/tor-bridge/defaults/main.yml

  pre_tasks:
    - name: Set the streisand_host fact to the value of the new server. This fact will be used to retrieve the obfsproxy port values.
      set_fact:
        streisand_host: "{{ groups['streisand-host'][0] }}"

    - name: Retrieve the randomly chosen Tor obfs3 port
      set_fact:
        tor_obfs3_port: "{{ hostvars[streisand_host]['tor_obfs3_port'] }}"

  roles:
    # We can modify the EC2 security group now that we know which
    # obfsproxy ports Tor is using
    - { role: ec2-security-group,
        open_ssh_port_only:     false,
        open_all_service_ports: true }
